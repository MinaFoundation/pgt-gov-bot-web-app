version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
    volumes:
      - .:/app
      - node_modules:/app/node_modules
      - next-cache:/app/.next
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network
    command: sh -c "
      npm install &&
      npx prisma migrate deploy &&
      npx prisma generate &&
      npm run dev
      "
    stdin_open: true
    tty: true

  db:
    image: postgres:17-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - app_network

volumes:
  postgres_data:
  pgadmin_data:
  node_modules:
  next-cache:

networks:
  app_network:
    driver: bridge